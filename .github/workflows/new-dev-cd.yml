name: Deploy AI Service to GCP VM (dev)

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    name: Deploy AI to VM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Infisical CLI from CloudFront
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Export MAIN env (.env for FastAPI)
        run: |
          infisical export \
            --env=prod \
            --token=${{ secrets.INFISICAL_MAIN_TOKEN }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > main.env

      - name: Export SUB env (.env for Streamlit)
        run: |
          infisical export \
            --env=prod \
            --token=${{ secrets.INFISICAL_SUB_TOKEN }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --path=/streamit \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > sub.env

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}

      - name: Upload Project and .envs to GCP VM (zip Î∞©Ïãù)
        run: |
          zip -r project.zip . -x "*.git*" "node_modules/*" "__pycache__/*"
          scp -o StrictHostKeyChecking=no project.zip ${{ secrets.GCP_VM_USER_DEV }}@${{ secrets.GCP_VM_IP_DEV }}:~
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER_DEV }}@${{ secrets.GCP_VM_IP_DEV }} << 'EOF'
            rm -rf ~/17-newsum-ai
            mkdir -p ~/17-newsum-ai
            unzip -q ~/project.zip -d ~/17-newsum-ai
            rm -f ~/project.zip
          EOF
          scp main.env ${{ secrets.GCP_VM_USER_DEV }}@${{ secrets.GCP_VM_IP_DEV }}:~/17-newsum-ai/.env
          scp sub.env ${{ secrets.GCP_VM_USER_DEV }}@${{ secrets.GCP_VM_IP_DEV }}:~/17-newsum-ai/pre-test/service_streamlit/.env

      - name: Stop & Start Services on VM (with logs)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER_DEV }}@${{ secrets.GCP_VM_IP_DEV }} << 'EOF'
            set -e
            export PATH="$HOME/.pyenv/bin:$PATH"
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"

            cd ~/17-newsum-ai

            echo "üõë Stopping old services..."
            if [ -f ./scripts/stop_services.sh ]; then
              chmod +x ./scripts/stop_services.sh
              ./scripts/stop_services.sh || true
              echo "üìÑ [stop_services.log]"
              cat ./scripts/logs/server.log || echo "(no server.log)"
              cat ./scripts/logs/worker.log || echo "(no worker.log)"
            fi

            echo "üöÄ Setting up FastAPI venv..."
            python -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "‚ñ∂Ô∏è Starting FastAPI & Worker..."
            chmod +x ./scripts/start_services.sh
            ./scripts/start_services.sh

            echo "üìÑ [start_services.log]"
            cat ./scripts/logs/server.log || echo "(no server.log)"
            cat ./scripts/logs/worker.log || echo "(no worker.log)"

            echo "üí° Setting up Streamlit..."
            cd pre-test/service_streamlit
            python -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "üìä Running Streamlit & Reception API..."
            nohup streamlit run app.py --server.port 8501 --server.address 0.0.0.0 > streamlit.log 2>&1 &
            nohup python3 -u reception_api.py > reception_api.log 2>&1 & echo $! > reception_api.pid

            sleep 3
            echo "üìÑ [streamlit.log]"
            tail -n 30 streamlit.log || echo "(no streamlit.log)"
            echo "üìÑ [reception_api.log]"
            tail -n 30 reception_api.log || echo "(no reception_api.log)"
          EOF
